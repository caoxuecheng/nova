<!--
  #%L
  nova-service-app
  %%
  Copyright (C) 2017 Onescorpin
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">

  <changeSet id="7" author="sr186054" runOnChange="true" dbms="mysql">
    <createView replaceIfExists="true" viewName="NFLOW_SUMMARY_VIEW" >
      <![CDATA[
     SELECT
        CONCAT(summary.NFLOW_NAME,
                COALESCE(e.JOB_EXECUTION_ID, -(99))) AS ID,
        summary.NFLOW_ID AS NFLOW_ID,
        summary.NFLOW_NAME AS NFLOW_NAME,
        f.NFLOW_TYPE AS NFLOW_TYPE,
        f.IS_STREAM AS IS_STREAM,
        e.JOB_EXECUTION_ID AS JOB_EXECUTION_ID,
        i.JOB_INSTANCE_ID AS JOB_INSTANCE_ID,
         CASE WHEN (f.IS_STREAM = 'Y' AND (s.RUNNING_NFLOW_FLOWS >0 OR ((UNIX_TIMESTAMP()*1000) - s.LAST_ACTIVITY_TIMESTAMP) <5000)) then
         'STARTING'
          ELSE
          e.STATUS
          END AS STATUS,
  CASE WHEN (f.IS_STREAM = 'Y' AND ( s.RUNNING_NFLOW_FLOWS >0 OR ((UNIX_TIMESTAMP()*1000) - s.LAST_ACTIVITY_TIMESTAMP) <5000)) then
   'EXECUTING'
   ELSE e.EXIT_CODE
   END AS EXIT_CODE,
        e.EXIT_MESSAGE AS EXIT_MESSAGE,
        e.START_TIME AS START_TIME,
        e.END_TIME AS END_TIME,
        summary.FAILED_COUNT AS FAILED_COUNT,
        summary.COMPLETED_COUNT AS COMPLETED_COUNT,
        summary.ABANDONED_COUNT AS ABANDONED_COUNT,
        summary.ALL_COUNT AS ALL_COUNT,
        s.RUNNING_NFLOW_FLOWS AS RUNNING_COUNT,
        CASE WHEN (f.IS_STREAM = 'Y' AND ( s.RUNNING_NFLOW_FLOWS >0 OR  ((UNIX_TIMESTAMP()*1000) - s.LAST_ACTIVITY_TIMESTAMP) <5000)) OR (f.IS_STREAM = 'N' AND e.END_TIME IS NULL) then
         'RUNNING'
         ELSE
          'FINISHED'
          END
         AS RUN_STATUS
    FROM NFLOW f
        INNER JOIN BATCH_JOB_INSTANCE i ON i.NFLOW_ID = f.ID
       INNER JOIN BATCH_JOB_EXECUTION e on e.JOB_INSTANCE_ID = i.JOB_INSTANCE_ID
       INNER JOIN BATCH_NFLOW_SUMMARY_COUNTS_VW summary ON summary.NFLOW_ID = i.NFLOW_ID  -- get counts rolling up dq nflows to their real nflow
       INNER JOIN LATEST_NFLOW_JOB_VW maxJobs   ON maxJobs.NFLOW_ID = f.ID -- join on the latest job for the nflow
            AND maxJobs.JOB_EXECUTION_ID = e.JOB_EXECUTION_ID
        INNER JOIN NIFI_NFLOW_STATS s on s.NFLOW_ID = f.ID
  ]]>
    </createView>
  </changeSet>

  <changeSet id="8" author="sr186054" runOnChange="true" dbms="mssql">
    <createView replaceIfExists="true" viewName="NFLOW_SUMMARY_VIEW" >
      <![CDATA[
    SELECT
        CONCAT(summary.NFLOW_NAME,
                COALESCE(e.JOB_EXECUTION_ID, -(99))) AS ID,
        summary.NFLOW_ID AS NFLOW_ID,
        summary.NFLOW_NAME AS NFLOW_NAME,
        f.NFLOW_TYPE AS NFLOW_TYPE,
        f.IS_STREAM AS IS_STREAM,
        e.JOB_EXECUTION_ID AS JOB_EXECUTION_ID,
        i.JOB_INSTANCE_ID AS JOB_INSTANCE_ID,
         CASE WHEN (f.IS_STREAM = 'Y' AND (s.RUNNING_NFLOW_FLOWS >0 OR  ((cast(Datediff(s, '1970-01-01', GETUTCDATE()) AS bigint)*1000) - s.LAST_ACTIVITY_TIMESTAMP) <5000)) then
         'STARTING'
          ELSE
          e.STATUS
          END AS STATUS,
  CASE WHEN (f.IS_STREAM = 'Y' AND (s.RUNNING_NFLOW_FLOWS >0 OR  ((cast(Datediff(s, '1970-01-01', GETUTCDATE()) AS bigint)*1000) - s.LAST_ACTIVITY_TIMESTAMP) <5000) )then
   'EXECUTING'
   ELSE e.EXIT_CODE
   END AS EXIT_CODE,
        e.EXIT_MESSAGE AS EXIT_MESSAGE,
        e.START_TIME AS START_TIME,
        e.END_TIME AS END_TIME,
        summary.FAILED_COUNT AS FAILED_COUNT,
        summary.COMPLETED_COUNT AS COMPLETED_COUNT,
        summary.ABANDONED_COUNT AS ABANDONED_COUNT,
        summary.ALL_COUNT AS ALL_COUNT,
        s.RUNNING_NFLOW_FLOWS AS RUNNING_COUNT,
        CASE WHEN (f.IS_STREAM = 'Y' AND  ( s.RUNNING_NFLOW_FLOWS >0 OR ( (cast(Datediff(s, '1970-01-01', GETUTCDATE()) AS bigint)*1000) - s.LAST_ACTIVITY_TIMESTAMP) <5000) ) OR (f.IS_STREAM = 'N' AND e.END_TIME IS NULL) then
         'RUNNING'
         ELSE
          'FINISHED'
          END
         AS RUN_STATUS
    FROM NFLOW f
        INNER JOIN BATCH_JOB_INSTANCE i ON i.NFLOW_ID = f.ID
       INNER JOIN BATCH_JOB_EXECUTION e on e.JOB_INSTANCE_ID = i.JOB_INSTANCE_ID
       INNER JOIN BATCH_NFLOW_SUMMARY_COUNTS_VW summary ON summary.NFLOW_ID = i.NFLOW_ID  -- get counts rolling up dq nflows to their real nflow
       INNER JOIN LATEST_NFLOW_JOB_VW maxJobs   ON maxJobs.NFLOW_ID = f.ID -- join on the latest job for the nflow
            AND maxJobs.JOB_EXECUTION_ID = e.JOB_EXECUTION_ID
        INNER JOIN NIFI_NFLOW_STATS s on s.NFLOW_ID = f.ID
  ]]>
    </createView>

  </changeSet>

  <changeSet id="9" author="sr186054" runOnChange="true" dbms="postgresql">
    <createView replaceIfExists="true" viewName="NFLOW_SUMMARY_VIEW" >
      <![CDATA[
   SELECT
        CONCAT(summary.NFLOW_NAME,
                COALESCE(e.JOB_EXECUTION_ID, -(99))) AS ID,
        summary.NFLOW_ID AS NFLOW_ID,
        summary.NFLOW_NAME AS NFLOW_NAME,
        f.NFLOW_TYPE AS NFLOW_TYPE,
        f.IS_STREAM AS IS_STREAM,
        e.JOB_EXECUTION_ID AS JOB_EXECUTION_ID,
        i.JOB_INSTANCE_ID AS JOB_INSTANCE_ID,
         CASE WHEN (f.IS_STREAM = 'Y' AND  (s.RUNNING_NFLOW_FLOWS >0 OR  ( (extract(epoch from now()) * 1000)- s.LAST_ACTIVITY_TIMESTAMP) <5000))  then
         'STARTING'
          ELSE
          e.STATUS
          END AS STATUS,
  CASE WHEN (f.IS_STREAM = 'Y' AND ( s.RUNNING_NFLOW_FLOWS >0 OR  ((extract(epoch from now()) * 1000) - s.LAST_ACTIVITY_TIMESTAMP) <5000) ) then
   'EXECUTING'
   ELSE e.EXIT_CODE
   END AS EXIT_CODE,
        e.EXIT_MESSAGE AS EXIT_MESSAGE,
        e.START_TIME AS START_TIME,
        e.END_TIME AS END_TIME,
        summary.FAILED_COUNT AS FAILED_COUNT,
        summary.COMPLETED_COUNT AS COMPLETED_COUNT,
        summary.ABANDONED_COUNT AS ABANDONED_COUNT,
        summary.ALL_COUNT AS ALL_COUNT,
        s.RUNNING_NFLOW_FLOWS AS RUNNING_COUNT,
        CASE WHEN (f.IS_STREAM = 'Y' AND (s.RUNNING_NFLOW_FLOWS >0 OR ((extract(epoch from now()) * 1000) - s.LAST_ACTIVITY_TIMESTAMP) <5000)) OR (f.IS_STREAM = 'N' AND e.END_TIME IS NULL) then
         'RUNNING'
         ELSE
          'FINISHED'
          END
         AS RUN_STATUS
    FROM NFLOW f
        INNER JOIN BATCH_JOB_INSTANCE i ON i.NFLOW_ID = f.ID
       INNER JOIN BATCH_JOB_EXECUTION e on e.JOB_INSTANCE_ID = i.JOB_INSTANCE_ID
       INNER JOIN BATCH_NFLOW_SUMMARY_COUNTS_VW summary ON summary.NFLOW_ID = i.NFLOW_ID  -- get counts rolling up dq nflows to their real nflow
       INNER JOIN LATEST_NFLOW_JOB_VW maxJobs   ON maxJobs.NFLOW_ID = f.ID -- join on the latest job for the nflow
            AND maxJobs.JOB_EXECUTION_ID = e.JOB_EXECUTION_ID
        INNER JOIN NIFI_NFLOW_STATS s on s.NFLOW_ID = f.ID
  ]]>
    </createView>
  </changeSet>

</databaseChangeLog>
